//The following code is used to implement an FSM which detects the sequence 1101

module seq_dec_2(
    input wire clk,
    input wire reset,
    input wire inp,
    output reg outp
);

//Defining States

typedef enum reg[2:0]{
    S0=3'b000,
    S1=3'b001,
    S2=3'b010,
    S3=3'b011,
    S4=3'b100
}state_t;

state_t current_state,next_state;

//State Transition logic

always@(posedge clk or posedge reset) begin
    if(reset) begin
            current_state <= S0;
    end else begin
            current_state <= next_state;
    end
end

//Next State Logic

always@(*) begin
    case(current_state)
        S0:next_state=(inp)?S1:S0;
        S1:next_state=(inp)?S2:S0;
        S2:next_state=(inp)?S2:S3;
        S3:next_state=(inp)?S4:S0;
        S4:next_state=(inp)?S2:S0;
        
    endcase
end

//Output Logic

always@(*) begin
    case(current_state)
        S4: outp=1;
        default: outp=0;
    endcase
end

endmodule